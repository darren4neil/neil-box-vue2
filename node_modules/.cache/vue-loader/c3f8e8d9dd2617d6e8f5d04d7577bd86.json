{"remainingRequest":"C:\\Workspace\\VueProjects\\vue-template-box\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Workspace\\VueProjects\\vue-template-box\\src\\menu\\MainContent.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Workspace\\VueProjects\\vue-template-box\\src\\menu\\MainContent.vue","mtime":1677397331769},{"path":"C:\\Workspace\\VueProjects\\vue-template-box\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1677397323499},{"path":"C:\\Workspace\\VueProjects\\vue-template-box\\node_modules\\babel-loader\\lib\\index.js","mtime":1677397323090},{"path":"C:\\Workspace\\VueProjects\\vue-template-box\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1677397323499},{"path":"C:\\Workspace\\VueProjects\\vue-template-box\\node_modules\\vue-loader\\lib\\index.js","mtime":1677397331049}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { mapState } from 'vuex'\r\n\texport default {\r\n        computed: {\r\n        ... mapState({\r\n                headerColor: state=>state.menu.headerColor,\r\n                isCollapse: state=>state.menu.isCollapse,\r\n                activeIndex: state=>state.menu.activeIndex\r\n            }),\r\n            editableTabs:{\r\n                get () { return this.$store.state.menu.editableTabs },\r\n                set (val) { this.$store.commit('editableTabs', val) }\r\n            },\r\n            editableTabsValue:{\r\n                get () { return this.$store.state.menu.editableTabsValue },\r\n                set (val) { this.$store.commit('editableTabsValue', val) }\r\n            }\r\n        },\r\n\t    data() {\r\n\t      return {\r\n                         \r\n            tabIndex: 2\r\n            };\r\n\t    },\r\n\t    methods: {\r\n            // tabs, 选中tab\r\n            selectedTabHandle (tab) {\r\n                tab = this.editableTabs.filter(item => item.name === tab.name)\r\n                if (tab.length >= 1) {\r\n                    //切换标签页时同步更新高亮菜单\r\n                    this.$store.commit('activeIndex', tab[0].menuId.toString());\r\n                    this.$router.push(tab[0].url);\r\n                }\r\n            },\r\n            //删除标签页\r\n\t        removeTab(targetName) {\r\n                let tabs = this.editableTabs;\r\n                let activeName = this.editableTabsValue;\r\n                if (activeName === targetName) {\r\n                tabs.forEach((tab, index) => {\r\n                    if (tab.name === targetName) {\r\n                        let nextTab = tabs[index + 1] || tabs[index - 1];\r\n                        if (nextTab) {\r\n                            activeName = nextTab.name;\r\n                        }\r\n                    }\r\n                });\r\n                }\r\n                //当前标签序号\r\n                this.editableTabsValue = activeName;\r\n                //标签\r\n                this.editableTabs = tabs.filter(tab => tab.name !== targetName);\r\n                var tab2 = this.editableTabs.filter(item => item.name === this.editableTabsValue);\r\n                if (tab2.length >= 1) {\r\n                    //切换标签页时同步更新高亮菜单\r\n                    this.$store.commit('activeIndex', tab2[0].menuId.toString());\r\n                    //跳转\r\n                    this.$router.push(tab2[0].url);\r\n                }\r\n            },\r\n            // tabs, 关闭当前\r\n            CloseCurrentTab () {\r\n                this.removeTab(this.editableTabsValue)\r\n            },\r\n            // tabs, 关闭其它\r\n            CloseOtherTab () {\r\n                this.editableTabs = this.editableTabs.filter(item => item.name === this.editableTabsValue)\r\n            },\r\n            // tabs, 关闭全部\r\n            CloseAllTab () {\r\n                this.editableTabs = [];\r\n                this.editableTabsValue = '1';\r\n                this.$store.commit('activeIndex', null);\r\n                this.$router.push(\"/\")\r\n            },\r\n            // tabs, 刷新当前\r\n            RefreshCurrentTab () {\r\n                var tab2 = this.editableTabs.filter(item => item.name === this.editableTabsValue);\r\n                if (tab2.length >= 1) {\r\n                    this.$nextTick(() => {\r\n                        //跳转\r\n                        this.$router.push(tab2[0].url);\r\n                    })\r\n                }\r\n                \r\n            }\r\n\t    }\r\n\t  }\r\n",{"version":3,"sources":["MainContent.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"MainContent.vue","sourceRoot":"src/menu","sourcesContent":["<template>\r\n    <div class=\"main-container\" :class=\"isCollapse?'tabs-width2':'tabs-width1'\">\r\n        <el-tabs class=\"tabs\" v-model=\"editableTabsValue\" type=\"card\" closable @tab-remove=\"removeTab\" @tab-click=\"selectedTabHandle\" :class=\"isCollapse?'tabs-width2':'tabs-width1'\">\r\n            <el-tab-pane\r\n                v-for=\"item in editableTabs\"\r\n                :key=\"item.name\"\r\n                :label=\"item.title\"\r\n                :name=\"item.name\"\r\n            >\r\n            <span slot=\"label\"><i :class=\"item.icon\"></i> {{item.title}} </span>\r\n            </el-tab-pane>\r\n            <el-dropdown class=\"tabs-tools\" :show-timeout=\"0\" trigger=\"hover\">\r\n                <div style=\"font-size:20px;width:50px;\"><i class=\"el-icon-arrow-down\"></i></div>\r\n                <el-dropdown-menu slot=\"dropdown\">\r\n                    <el-dropdown-item @click.native=\"CloseCurrentTab\">关闭当前标签</el-dropdown-item>\r\n                    <el-dropdown-item @click.native=\"CloseOtherTab\">关闭其它标签</el-dropdown-item>\r\n                    <el-dropdown-item @click.native=\"CloseAllTab\">关闭全部标签</el-dropdown-item>\r\n                    <el-dropdown-item @click.native=\"RefreshCurrentTab\">刷新当前标签</el-dropdown-item>\r\n                </el-dropdown-menu>\r\n            </el-dropdown>\r\n        </el-tabs>\r\n        <div class=\"view\">\r\n            <!-- 内容区域 -->\r\n            <router-view></router-view>\r\n        </div>\r\n        \r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapState } from 'vuex'\r\n\texport default {\r\n        computed: {\r\n        ... mapState({\r\n                headerColor: state=>state.menu.headerColor,\r\n                isCollapse: state=>state.menu.isCollapse,\r\n                activeIndex: state=>state.menu.activeIndex\r\n            }),\r\n            editableTabs:{\r\n                get () { return this.$store.state.menu.editableTabs },\r\n                set (val) { this.$store.commit('editableTabs', val) }\r\n            },\r\n            editableTabsValue:{\r\n                get () { return this.$store.state.menu.editableTabsValue },\r\n                set (val) { this.$store.commit('editableTabsValue', val) }\r\n            }\r\n        },\r\n\t    data() {\r\n\t      return {\r\n                         \r\n            tabIndex: 2\r\n            };\r\n\t    },\r\n\t    methods: {\r\n            // tabs, 选中tab\r\n            selectedTabHandle (tab) {\r\n                tab = this.editableTabs.filter(item => item.name === tab.name)\r\n                if (tab.length >= 1) {\r\n                    //切换标签页时同步更新高亮菜单\r\n                    this.$store.commit('activeIndex', tab[0].menuId.toString());\r\n                    this.$router.push(tab[0].url);\r\n                }\r\n            },\r\n            //删除标签页\r\n\t        removeTab(targetName) {\r\n                let tabs = this.editableTabs;\r\n                let activeName = this.editableTabsValue;\r\n                if (activeName === targetName) {\r\n                tabs.forEach((tab, index) => {\r\n                    if (tab.name === targetName) {\r\n                        let nextTab = tabs[index + 1] || tabs[index - 1];\r\n                        if (nextTab) {\r\n                            activeName = nextTab.name;\r\n                        }\r\n                    }\r\n                });\r\n                }\r\n                //当前标签序号\r\n                this.editableTabsValue = activeName;\r\n                //标签\r\n                this.editableTabs = tabs.filter(tab => tab.name !== targetName);\r\n                var tab2 = this.editableTabs.filter(item => item.name === this.editableTabsValue);\r\n                if (tab2.length >= 1) {\r\n                    //切换标签页时同步更新高亮菜单\r\n                    this.$store.commit('activeIndex', tab2[0].menuId.toString());\r\n                    //跳转\r\n                    this.$router.push(tab2[0].url);\r\n                }\r\n            },\r\n            // tabs, 关闭当前\r\n            CloseCurrentTab () {\r\n                this.removeTab(this.editableTabsValue)\r\n            },\r\n            // tabs, 关闭其它\r\n            CloseOtherTab () {\r\n                this.editableTabs = this.editableTabs.filter(item => item.name === this.editableTabsValue)\r\n            },\r\n            // tabs, 关闭全部\r\n            CloseAllTab () {\r\n                this.editableTabs = [];\r\n                this.editableTabsValue = '1';\r\n                this.$store.commit('activeIndex', null);\r\n                this.$router.push(\"/\")\r\n            },\r\n            // tabs, 刷新当前\r\n            RefreshCurrentTab () {\r\n                var tab2 = this.editableTabs.filter(item => item.name === this.editableTabsValue);\r\n                if (tab2.length >= 1) {\r\n                    this.$nextTick(() => {\r\n                        //跳转\r\n                        this.$router.push(tab2[0].url);\r\n                    })\r\n                }\r\n                \r\n            }\r\n\t    }\r\n\t  }\r\n</script>\r\n\r\n\r\n<style>\r\n\t.main-container{\r\n        padding: 0 5px 5px;\r\n        position: absolute;\r\n        top: 5rem;\r\n        left: 1px;\r\n        right: 1px;\r\n        bottom: 0px;\r\n    }\r\n    .tabs {\r\n        position: fixed;\r\n        top: 60px;\r\n        right: 2px;\r\n        padding-left: 0px;\r\n        padding-right: 2px;\r\n        z-index: 1020;\r\n        height: 40px;\r\n        line-height: 40px;\r\n        font-size: 14px;\r\n        background: rgb(255, 253, 255);\r\n        border-color: rgba(200, 206, 206, 0.5);\r\n        /* // border-left-width: 1px;\r\n        // border-left-style: solid; */\r\n        border-bottom-width: 1px;\r\n        border-bottom-style: solid;\r\n    }\r\n    .tabs-width1{\r\n        left: 200px;\r\n    }\r\n    .tabs-width2{\r\n        left: 65px;\r\n    }\r\n    .view{\r\n        position: absolute;\r\n        top: 45px;\r\n        left: 5px;\r\n        right: 5px;\r\n        bottom: 5px;\r\n        padding: 5px;\r\n    }\r\n    .tabs-tools {\r\n        position: fixed;\r\n        top: 60px;\r\n        right: 0;\r\n        z-index: 1000;\r\n        height: 40px;\r\n        font-size: 14px;\r\n        line-height: 40px;\r\n        cursor: pointer;\r\n        border-color: rgba(200, 206, 206, 0.5);\r\n        border-left-width: 1px;\r\n        border-left-style: solid;\r\n        border-bottom-width: 1px;\r\n        border-bottom-style: solid;\r\n        background: rgba(255, 255, 255, 1);\r\n    }\r\n</style>"]}]}